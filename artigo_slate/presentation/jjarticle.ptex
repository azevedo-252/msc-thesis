\documentclass[serif]{beamer}
\usepackage{natslides}
 \usepackage{listings}
% \usepackage{attachfile}
% \usepackage{graphicx}
\usepackage{teximporter}
%\usepackage{multimedia}
\usepackage[ruled,vlined]{algorithm2e}
\usepackage{amsmath}

\inlinepin

\newcommand{\abc}{\textsc{abc}}
\newcommand{\abcdt}{\textsc{abc::dt}}
\newcommand{\abcpt}{\abc{} processing tool}
\newcommand{\unix}{\textsc{unix}}
\newcommand{\midi}{\textsc{midi}}
\newcommand{\abcmtops}{\texttt{abcm2ps}}
\newcommand{\abctomidi}{\texttt{abc2midi}}
\fvset{fontsize=\footnotesize,[commandchars=\\\{\}]}

\title{ ABC with a UNIX flavor }
\author[Bruno Azevedo \& JJ]{Bruno M. Azevedo\\J. João Almeida}
\institute{Departament of Informatics,\\Universidade do Minho,\\Portugal}

\begin{document}
\maketitle

=. Structure of this presentation

\tableofcontents

=.= Introduction

:
. \abc{}
  \begin{Verbatim}[fontsize=\scriptsize]
    Textual music notation
  \end{Verbatim}
. \unix{} metaphor
\begin{Verbatim}[fontsize=\scriptsize,frame=single]
Simple single-task programs       Simple music single-task programs
filters                           filters
  cat, paste, grep, wc              abc-cat, abc-paste, abc-grep
Compositionality, pipes

Universal type: text              Universal music (abc)
  
Development Language (C)          Devel DSL  Abc::DT
\end{Verbatim}
. \abcdt{}:
  . Rule-based DSL
  . ABC oriented 
  . Compact specification
  . Deals with real ABC music
  . Surgical processing
  . Rich embedding mechanisms (Perl)
  #
#

=.== Abc music notation

\begin{Verbatim}
X:1
M: 3/4
T: waltz
K: C
C C E | G G2 | E E z | C C2 |
\end{Verbatim}


\begin{import_abc}[scale=0.6,midi]
X:1
M: 3/4
T: Waltz
K: C
L: 1/4
C C E | G G2 | E E z | C C2 |
\end{import_abc}\\[2em]


\inline_makefileg[rankdir=1,scale=0.5]{
LaTeX: Pdf Midi
Pdf: abc
    abcm2ps
Midi: abc
    abc2midi
}

=.== Related Projects and Tools

:
. \abcmtops{}
  \begin{Verbatim}[fontsize=\scriptsize]
    Translates ABC music into sheet music scores in PostScript or SVG
  \end{Verbatim}
. \abctomidi{}
  \begin{Verbatim}[fontsize=\scriptsize]
    Converts ABC music into a MIDI file
  \end{Verbatim}
. Music21
  \begin{Verbatim}[fontsize=\scriptsize]
    A Python-based toolkit for computer-aided musicology
  \end{Verbatim}
. Haskore
  \begin{Verbatim}[fontsize=\scriptsize]
    Haskell modules for creating, analyzing and manipulating music
  \end{Verbatim}
#

=.== Internal Music Representation

:
. Partwise (melody)
. Timewise (harmony)
. Sourcewise
. monads
#

=. ... Internal Music Representation
\begin{block}{Partwise Structure: organized by the part}
score →  part$^*$

part →  (meta, note$^*$)

note →  (freq, duration,...)  
\end{block}

\begin{block}{Timewise Structure}
score →  harmonic-instant$^*$

harmonic-instant →  (duration, (part→ note), ...)
:
. The score is organized by a vertical element;
#
\end{block}

\begin{block}{Sourcewise Structure: follows the \abc{} source order}
score →  (abc-element, position)$^*$

abc-element →  meta | note | ...  

position → (state, current-time, current-part, ...)
:
.  Enables the easy reconstruction of the original \abc{};
. Needs calculation of current position (time, part, etc)
#
\end{block}

=.= \abcpt{} based in \abcdt{}

An \abcpt{} follows a traditional compiler's structure:

:
. Parse \abc{} input
. Transform the generated representation (based on \abcdt{} rules)
. Generate the output
#

\begin{figure}[htb]
  \centering 
  \includegraphics[width=0.8\textwidth]{../img/abc_dt.pdf} 
%  \caption{\abcpt{} architecture}
  \label{fig:process_stages}
\end{figure}

=.== Parse \abc{} Input

% An \abcpt{} must be able to deal with real \abc{} music, therefore its parser has to be robust.

\abcmtops{}' parser is the parser currently being used by an \abcpt{}. 
Its generated IR is a sequential structure, in which each element corresponds to an \abc{} element.

That structure - a list of C data structures - has to be adapted to Perl.

\begin{figure}[htb]
  \centering 
  \includegraphics[width=\textwidth]{../img/parse_abc_input_stage.pdf} 
%  \caption{\emph{Parse \abc{} Input} stage}
  \label{fig:parse_abc_input_stage}
\end{figure}

=. Transform the generated representation

:
. Traversal of the IR applying \abcdt{} rules to each abc element.
. elements not covered by the actuators are kept unchanged.
. Effective in building tools that do simple transformations:
  . just provide the points and the specific changes.
  #
#

=.== \abcdt{} Rules

\begin{block}{\abcdt{} Rule}
  actuator ⇒  transformation
\end{block}

:
.  =actuator= selects an \abc{} element or a group of elements.
.  =transformation= specifies how each element should be processed
#
\begin{block}{}
  \begin{Verbatim}[fontsize=\scriptsize]
  note
  in_line::K:
  note::!f!
  V:Tenor::note
  V:Tenor::note::_B
  \end{Verbatim}
\end{block}

*Special Actuators*
:
. \emph{-default}
  Describes how to transform each \abc{} element which is not covered in the traversal
. \emph{-end}
  Enables a general post processing of the final \abc{}, hence, making possible to attain different
  output formats
#

=.== Processor Algorithm

\begin{block}{abc-dt-processor(abc-file,handler)}
  \KwIn{abc-file}
  \KwIn{handler: $[(actuator,transform)]$  \hfill //rules}
  $musicIR \gets$ parse(abc-file) \hfill //[abc-element] \\
  \ForAll{$ a \in musicIR $}{
     $state \gets$ recalculate current position \\
     $r \gets \mbox{rule ∈ handler with best matching actuator 
            \textbf{or} -default}$\\
     $a \gets r.transform(a,state)$ \\
  }
  return handler[-end]( $abc(musicIR) $)\;
\end{block}

During the structure's traversal,
:
 . when an element matches an actuator, the corresponding
transformation is applied.

 . the current element's state is calculated.
#

=. Generate the output

The transformed IR is outputted.

The identity function - \texttt{toabc()} - is based on \texttt{tclabc}'s implementation.

= \abcdt{} by example
== All But One

=. \abcdt{} by example

\emph{All But One}

:
 . Reduce the volume of \emph{my} voice
 . To help musicians in individual rehearsal of multi-voice music.
 . Add a midi directive
#

\begin{block}{All But One: \abcdt{} rules}
\begin{Verbatim}

  "V:Tenor" => sub{ toabc() . "%%MIDI control 7 0\n"; }

\end{Verbatim}
\end{block}


%\begin{block}{}
\begin{Verbatim}
... 
my %handler = (
  "V:$voice" => sub{ toabc() . "%%MIDI control 7 $min_volume\n"; }
);
abcdt($file,%handler)
...
\end{Verbatim}
%\end{block}

=. 

\begin{minipage}{.49\textwidth}
\begin{Verbatim}[commandchars=\\\{\},fontsize=\scriptsize]
 T:Tuti
 C:Anonimous, 16th century
 M:3/4
 K:G
 V:1 name="Soprano" clef=treble
 G4 G2|G4 F2|A4 A2|B4 z2|:
 w: Ver- bum|ca- ro|fac- tum|est|
 V:2 name="Contralto" clef=treble
 D4 D2|E4 D2|E4 F2|G4 z2|:
 \emph{V:3 name="Tenor"} clef=treble-8     →
 G3 A B2|c4 A2|c4 c2|d4 z2|:
 V:4 name="Baixo" clef=bass
 G,4 G,2|C,4 D,2|A,4 A,2|G,4 z2|:
\end{Verbatim}
\end{minipage}
\begin{minipage}{.49\textwidth}
\begin{Verbatim}[commandchars=\\\{\},fontsize=\scriptsize]
 T:Tuti
 C:Anonimous, 16th century
 M:3/4
 K:G
 V:1 name="Soprano" clef=treble
 G4 G2|G4 F2|A4 A2|B4 z2|:
 w: Ver- bum|ca- ro|fac- tum|est|
 V:2 name="Contralto" clef=treble
 D4 D2|E4 D2|E4 F2|G4 z2|:
 V:3 name="Tenor" clef=treble-8
 \emph{%%MIDI control 7 25}
 G3 A B2|c4 A2|c4 c2|d4 z2|:
 V:4 name="Baixo" clef=bass
 G,4 G,2|C,4 D,2|A,4 A,2|G,4 z2|:
\end{Verbatim}
\end{minipage}

\inline_abc[midi,width=.7\textwidth]{
X:100
T:Tuti
C:Anonimous, 16th century
M:3/4
L:1/8
K:G
V:1 name="Soprano" clef=treble
G4 G2|G4 F2|A4 A2|B4 z2|:
w: Ver- bum|ca- ro|fac- tum|est|
V:2 name="Contralto" clef=treble
D4 D2|E4 D2|E4 F2|G4 z2|:
w: Ver- bum|ca- ro|fac- tum|est|
V:3 name="Tenor" clef=treble-8
G3 A B2|c4 A2|c4 c2|d4 z2|:
w: Ver - bum|ca- ro|fac- tum|est|
V:4 name="Baixo" clef=bass
G,4 G,2|C,4 D,2|A,4 A,2|G,4 z2|:
w: Ver- bum|ca- ro|fac- tum|est|
}
\inline_abc[midi,width=.01\textwidth]{
X:100
T:Tuti
C:Anonimous, 16th century
M:3/4
L:1/8
K:G
V:1 name="Soprano" clef=treble
G4 G2|G4 F2|A4 A2|B4 z2|:
w: Ver- bum|ca- ro|fac- tum|est|
V:2 name="Contralto" clef=treble
D4 D2|E4 D2|E4 F2|G4 z2|:
w: Ver- bum|ca- ro|fac- tum|est|
V:3 name="Tenor" clef=treble-8
%%MIDI control 7 25
G3 A B2|c4 A2|c4 c2|d4 z2|:
w: Ver - bum|ca- ro|fac- tum|est|
V:4 name="Baixo" clef=bass
G,4 G,2|C,4 D,2|A,4 A,2|G,4 z2|:
w: Ver- bum|ca- ro|fac- tum|est|
}

% \hyperlinkmute{para}

=.== \abc-paste

\emph{\abc{} Paste}

Merges the voices of tunes parallel to each other in the time perspective.

\begin{block}{Algorithm}
:
.1 get the header for the resulting score
\begin{Verbatim}
First tune with at least one note written;
\end{Verbatim}
.2 Paste the tunes
\begin{Verbatim}
  remove redundant metadata
  calculate part length
\end{Verbatim}
.3 Append any necessary rests
\begin{Verbatim}
  Append a multi-measure rest if voice is shorter than the longest
\end{Verbatim}
#
\end{block}

=.== \abc{}-cat

\emph{\abc{} Cat}

Concatenates each tune one after the other in the time perspective.

\begin{block}{Algorithm}
:
.1 get the header for the resulting score
\begin{Verbatim}
First tune with at least one note written;
\end{Verbatim}
.2 For each tune, print the tune and aditional rests
\begin{Verbatim}
Keeps track of each voice's id, measures, meter (M),
  length (L), key (K) and tempo (Q);
Appends rests to any voice that isn't present in the
  current tune;
Appends rests to any voice belonging to the current tune
  that is not present in previous tunes;
\end{Verbatim}
#
\end{block}

=. \abcdt{} by example

\emph{Composition of \abc{} Paste and Cat}

Assemble the whole score by composing \abc{} Paste with \abc{} Cat.

\begin{block}{Score}
=Verbum caro factum est=
\end{block}

:
. assemble three sections of the score (1, 2 and 3) 
. for two parts only (Soprano and Tenor). 
. Each part and section is written in single files.
#

=. \abcdt{} by example

\emph{\abc{} Paste to Section 1 - Both Parts}

\import_abc[width=.8\textwidth,midi]{101.abc}
\import_abc[width=.8\textwidth,midi]{103.abc}

\begin{block}{\abc{} Paste}
\texttt{abc\_paste 101.abc 103.abc > A.abc}
%\lstinputlisting[]{abc_paste_by_example.tex}
\end{block}

\import_abc[width=.8\textwidth,midi]{A.abc}

=. \abcdt{} by example

\emph{\abc{} Cat  Section 2 (Soprano) and Section 3 (Tenor)}

\import_abc[width=0.7\textwidth,midi]{201.abc}
\import_abc[width=0.7\textwidth,midi]{303.abc}

\begin{block}{\abc{} Cat}
\lstinputlisting[]{abc_cat_by_example.tex}
\end{block}
\import_abc[width=0.8\textwidth,midi]{B.abc}

=. \abcdt{} by example

\emph{Applying \abc{} Cat to previous outputs}
\import_abc[width=1mm,midi]{verbum.abc}

\begin{block}{\abc{} Cat}
\lstinputlisting[]{cat_paste_by_example_simple.tex}
\end{block}

  \includegraphics[width=\textwidth, clip=true, trim = 0mm 105mm 0mm 76mm]{../img/c_letters.pdf} 

=.= Conclusions

:
. Reusing \abcmtops{}'s parser was very important to help guarantee this work's quality, coverage and
developing time.% The generated IR is source oriented which allows obtaining valid \abc{} and robust
%tools - it knows how to deal with unknown elements.
. Using Perl as the language embedded into \abcdt{} provides a rich environment to allow easier
processing of text. Furthermore, through the use of data structures, like hashes, the user has
bigger expressive power to specify transformations.
. We believe that the rule based processor makes it possible to write very compact tools.
. %One of our main goals is to build an \abc{} operating system. Moreover, presently, there is a lack
%of music notation general processing tools, particularly for \abc{}. Thus, 
The existence of DSL's
like \abcdt{} helps to the simplification of crafting new \abc{} processing tools.
#

=. The End

\end{document}
